#!/bin/bash

usage ()
{
	echo
	echo "Manage Apache JMeter (distributed) load tests."
	echo
	echo "Prerequitites:"
	echo "  - Docker & Docker Machine installed: https://docs.docker.com/machine/"
	echo "  - A test plan definition .jmx file created with JMeter 3.2: http://jmeter.apache.org/"
	echo
	echo "Usage:"
	echo
	echo "$(basename $0) run JMX MACHINE [REMOTE_HOST...]"
	echo "  Run the given test in non-gui mode, locally or remote, generating"
	echo "  a dashboard report."
	echo "  JMX             Path to the .jmx file."
	echo "  MACHINE         The docker-machine that should run the test."
	echo "  REMOTE_HOST...  Any number of host names or IP addresses of remote"
	echo "                  slave servers to use for distributed testing."
	echo "                  If unset, the test is run locally."
	# TODO make it a list of machine names
	echo
	echo "$(basename $0) server ACTION MACHINE"
	echo "  Manage remote JMeter slave servers."
	echo "  ACTION   Either start, stop, or restart."
	echo "  MACHINE  The targeted docker-machine."
	echo
	echo "$(basename $0) perfmon ACTION MACHINE"
	echo "  Manage the PerfMon Server Agent on application servers."
	echo "  ACTION   Either start, stop, or restart."
	echo "  MACHINE  The targeted docker-machine."
	echo
	echo "$(basename $0) help"
	echo "  Display this message."
	echo
}

COMMAND="$1"
MACHINE="$3"
if [ ! $MACHINE ]; then
	usage; exit 1
fi
run="docker-machine ssh $MACHINE"

absolute ()
{
	base=$(basename $1)
	dir=$(dirname $1)
	dir=$(cd $dir ; pwd)
	echo "$dir/$base"
}

case "${COMMAND}" in

run)
	JMX="${2}"
	docker-machine scp $(absolute ${JMX}) ${MACHINE}:jmx

	shift 3
	REMOTE_HOSTS="$*"
	# TODO: read IPs from remote machine names

	IP=$(docker-machine ip ${MACHINE})

	echo "* starting test..."
	$run "sudo ufw allow 60000 && sudo ufw reload" 2>/dev/null
	$run docker run --rm --name master \
		--env IP=${IP} \
		--volume /home/docker/jmx:/jmx \
		--volume /home/docker/results:/results \
		--publish 60000:60000 \
		wscherphof/jmeter:3.2 \
		master ${REMOTE_HOSTS}

	if [ "$?" != "0" ]; then
		exit $?
	fi

	DIR="./jmeter-test/$(date "+%Y-%m-%d/%H.%M.%S")"
	mkdir -p ${DIR}

	docker-machine scp -r ${MACHINE}:results $(absolute ${DIR})
	echo "* results saved in ${DIR}"
;;

perfmon)
	action=$2
	start="$run docker run --rm --detach --publish 4444:4444 --name perfmon wscherphof/perfmon:2.2.1"
	stop="$run docker kill perfmon"
	if [ "$action" = "start" ]; then
		$run "sudo ufw allow 4444 && sudo ufw reload" 2>/dev/null
		$start
	elif [ "$action" = "stop" ]; then
		$stop
		$run "sudo ufw deny 4444 && sudo ufw reload" 2>/dev/null
	elif [ "$action" = "restart" ]; then
		$stop
		$start
	else
		usage; exit 1
	fi
;;

server)
	action=$2
	stop="$run docker kill slave"
	if [ "$action" = "stop" ]; then
		$stop
		$run "sudo ufw deny 1099 && sudo ufw reload" 2>/dev/null
	else
		ip=$(docker-machine ip $MACHINE)
		start="$run docker run --rm --detach --publish 1099:1099 --name slave --env IP=$ip wscherphof/jmeter:3.2"
		if [ "$action" = "restart" ]; then
			$stop
			$start
		elif [ "$action" = "start" ]; then
			$run "sudo ufw allow 1099 && sudo ufw reload" 2>/dev/null
			$start
		else
			usage; exit 1
		fi
	fi
;;

help)
	usage; exit 0
;;

*)
	usage; exit 1
;;

esac
